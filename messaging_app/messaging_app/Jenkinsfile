pipeline {
    agent any

    environment {
	// These will be set up as credentials in Jenkins
        GITHUB_CREDENTIALS = credentials('github-credentials')
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
	DOCKER_IMAGE = "messaging_app"
    }

    stages {
        stage('Checkout') {
            steps {
		// Checkout code from GitHub using credentials
		// git branch
                git(
                    url: 'https://github.com/peterayad-eng/alx-backend-python.git',
                    credentialsId: 'github-credentials',
                    branch: 'main',
                    changelog: true,
                    poll: true
                )
            }
        }

        stage('Setup Python') {
            steps {
		// pip3 install
                sh '''
                python3 -m venv venv
                . venv/bin/activate
                pip install --upgrade pip
                pip install -r messaging_app/requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                . venv/bin/activate
                cd messaging_app
                python -m pytest --junitxml=test-results.xml --cov=. --cov-report=xml:coverage.xml --cov-report=html
                '''
            }
            post {
                always {
                    // Publish test results
                    junit 'messaging_app/test-results.xml'
                    publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: false,
                        keepAll: false,
                        reportDir: 'messaging_app/htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report',
                        reportTitles: ''
                    ])
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                cd messaging_app
                docker build -t $DOCKER_IMAGE:$BUILD_NUMBER .
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials',
                                                 usernameVariable: 'DOCKER_USER',
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker push $DOCKER_IMAGE:$BUILD_NUMBER
                    docker tag $DOCKER_IMAGE:$BUILD_NUMBER $DOCKER_IMAGE:latest
                    docker push $DOCKER_IMAGE:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
    }
}
